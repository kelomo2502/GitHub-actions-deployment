name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

  dockerize:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t my-todo-app .
          docker tag my-todo-app:latest ${{ secrets.DOCKER_USERNAME }}/my-todo-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-todo-app:latest

      - name: Log out from Docker Hub
        run: docker logout

  deploy:
  needs: [dockerize]
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script: |
          # Stop and remove the old container (if it exists)
          docker stop my-todo-app || true
          docker rm my-todo-app || true

          # Pull the latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-todo-app:latest

          # Deploy the container with a specific name
          docker run -d -p 3000:3000 --name my-todo-app ${{ secrets.DOCKER_USERNAME }}/my-todo-app:latest

          # Clean up unused Docker resources
          docker system prune -af

         
      - name: Cleanup Docker images
        run: docker system prune -af
